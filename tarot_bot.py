import logging
import requests
import re
import json
import os
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from help_handler import help_command
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import tiktoken
import speech_recognition as sr
from telegram import File
import io
from pydub import AudioSegment

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
PROXY_API_KEY = os.getenv('PROXY_API_KEY')
PROXY_API_URL = os.getenv('PROXY_API_URL')
USER_DATA_FILE = 'user_data.json'
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
CHAT_HISTORY_FILE = 'user_chat_history.json'
CHANNEL_IDS = os.getenv('CHANNEL_IDS').split(',')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
MODEL_NAME = os.getenv('MODEL_NAME')
MAX_TOKENS = int(os.getenv('MAX_TOKENS'))
TEMPERATURE = float(os.getenv('TEMPERATURE'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as file:
            return [json.loads(line) for line in file]
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON-—Ñ–∞–π–ª
def save_user_data(user_data):
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as file:
        for user in user_data:
            json.dump(user, file, ensure_ascii=False)
            file.write('\n')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def notify_admin(context: CallbackContext, message: str):
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

def load_chat_history(user_id, limit=10):
    if os.path.exists(CHAT_HISTORY_FILE):
        with open(CHAT_HISTORY_FILE, 'r', encoding='utf-8') as file:
            chat_history = json.load(file)
        return chat_history.get(str(user_id), [])[-limit:]
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
def add_or_update_user(user_data, user_id, username, context: CallbackContext, tokens_used=0, date_of_birth=None,
                       time_of_birth=None, place_of_birth=None):
    user_found = False
    for user in user_data:
        if isinstance(user, dict) and user['user_id'] == user_id:
            user['username'] = username
            user['last_active'] = datetime.now().strftime('%d-%m-%Y')
            user['tokens_used'] = user.get('tokens_used', 0) + tokens_used
            if date_of_birth:
                user['date_of_birth'] = date_of_birth
            if time_of_birth:
                user['time_of_birth'] = time_of_birth
            if place_of_birth:
                user['place_of_birth'] = place_of_birth
            if 'subscribe' not in user:
                user['subscribe'] = True
            user_found = True
            break

    if not user_found:
        new_user = {
            'user_id': user_id,
            'username': username,
            'registration_date': datetime.now().strftime('%d-%m-%Y'),  # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            'last_active': datetime.now().strftime('%d-%m-%Y'),
            'tokens_used': tokens_used,
            'date_of_birth': date_of_birth,
            'time_of_birth': time_of_birth,
            'place_of_birth': place_of_birth,
            'subscribe': True
        }
        user_data.append(new_user)
        context.application.create_task(notify_admin(context, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})"))

    save_user_data(user_data) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è


async def unsubscribe(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id  # –û—Å—Ç–∞–≤–ª—è–µ–º user_id –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞
    user_data = load_user_data()

    user_found = False
    for user in user_data:
        if user['user_id'] == user_id:
            user['subscribe'] = False
            user_found = True
            break

    if user_found:
        save_user_data(user_data)
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤.")
    else:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
def save_chat_history(user_id, message, role):
    chat_history = {}
    if os.path.exists(CHAT_HISTORY_FILE):
        with open(CHAT_HISTORY_FILE, 'r', encoding='utf-8') as file:
            chat_history = json.load(file)

    if str(user_id) not in chat_history:
        chat_history[str(user_id)] = []

    chat_history[str(user_id)].append({
        'timestamp': datetime.now().strftime('%d-%m-%Y %H:%M:%S'),
        'message': message,
        'role': role
    })

    with open(CHAT_HISTORY_FILE, 'w', encoding='utf-8') as file:
        json.dump(chat_history, file, ensure_ascii=False, indent=4)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
def count_tokens(text):
    encoding = tiktoken.encoding_for_model("gpt-4o-mini")
    tokens = encoding.encode(text)
    return len(tokens)

# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
async def send_daily_horoscopes(context: CallbackContext):
    user_data = load_user_data()
    today_date = datetime.now().strftime('%Y-%m-%d')  # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î
    for user in user_data:
        if user.get('subscribe') and all(user.get(k) for k in ('date_of_birth', 'time_of_birth', 'place_of_birth')):
            user_id = user['user_id']
            date_of_birth = user['date_of_birth']
            time_of_birth = user['time_of_birth']
            place_of_birth = user['place_of_birth']
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∞—Å—Ç—Ä–æ–ª–æ–≥. –ú–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {date_of_birth}, –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è {time_of_birth}, –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è {place_of_birth}. –î–∞–π –º–Ω–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {today_date}. –í –æ—Ç–≤–µ—Ç–µ –¥–∞–≤–∞–π –º–µ–Ω—å—à–µ —Ç–µ–æ—Ä–∏–∏ –∏ –≤–æ–¥—ã, –¥–∞–π —Ç–æ–ª—å–∫–æ –≤—ã–∂–∏–º–∫—É —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –¥–ª—è –∫–∞–∫–∏—Ö –¥–µ–ª –¥–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π, —á–µ–≥–æ —Å—Ç–æ–∏—Ç –æ–ø–∞—Å–∞—Ç—å—Å—è, –∫–∞–∫–∏–µ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            try:
                response = send_openai_request(prompt)
                await context.bot.send_message(chat_id=user_id, text=response)
            except Exception as e:
                logger.error(f"Error generating astrology forecast for user {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int, bot_token: str, channel_id: str) -> bool:
    url = f"https://api.telegram.org/bot{bot_token}/getChatMember?chat_id={channel_id}&user_id={user_id}"
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {channel_id}")
    response = requests.get(url)
    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.text}")
    result = response.json()
    status = result.get("result", {}).get("status", "")
    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status}")
    return status in ["member", "administrator", "creator"]

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
async def check_subscription_multiple(user_id: int, bot_token: str, channel_ids: list) -> bool:
    for channel_id in channel_ids:
        if await check_subscription(user_id, bot_token, channel_id):
            return True
    return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    is_subscribed = await check_subscription_multiple(user_id, TELEGRAM_TOKEN, CHANNEL_IDS)
    if not is_subscribed:
        await update.message.reply_text(
            "–î–∞–Ω–Ω—ã–µ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.\n\n"
            "–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n"
            "1. [–ö–∞–Ω–∞–ª –ø—Ä–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é](https://t.me/psikholog_onlajn_besplatno_chat)\n"
            "2. [–ü—Å–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–≥–æ–π](https://t.me/juliakoyash)\n"
            ,
            parse_mode='Markdown'
        )
        return
    user_data = load_user_data()
    add_or_update_user(user_data, user_id, username, context)
    keyboard = [
        [InlineKeyboardButton("üß† –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="psychologist")],
        [InlineKeyboardButton("üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="career_consultant")],
        [InlineKeyboardButton("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥", callback_data="astrology")],
        [InlineKeyboardButton("üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥", callback_data="numerology")],
        [InlineKeyboardButton("üöÄ –ö–æ—É—á –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é", callback_data="self_development_coach")],
        [InlineKeyboardButton("üÉè –¢–∞—Ä–æ", callback_data="tarot")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üåü –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≥–∏–¥ –ø–æ –ø–æ–∏—Å–∫—É –ª—É—á—à–∏—Ö —Ä–µ—à–µ–Ω–∏–π, –±–∞–ª–∞–Ω—Å—É, –∫—Ä–µ–ø–∫–æ–π –≤–µ—Ä—ã –≤ —Å–µ–±—è –∏ –¥–æ–≤–µ—Ä–∏—é –º–∏—Ä—É."
        "–Ø —è–≤–ª—è—é—Å—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –º–æ–≥—É –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ä–æ–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—É—á–∞, –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞, –∞—Å—Ç—Ä–æ–ª–æ–≥–∞, –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞ –∏ —Ç–∞—Ä–æ–ª–æ–≥–∞."
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n\n"
        "üß† *–ü—Å–∏—Ö–æ–ª–æ–≥*: –ü—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–º–æ–∂–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.\n"
        "üöÄ *–ö–æ—É—á –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é*: –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π.\n"
        "üìà *–ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç*: –°–æ–≤–µ—Ç—ã –ø–æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É.\n"
        "üîÆ *–ê—Å—Ç—Ä–æ–ª–æ–≥*: –£–∑–Ω–∞–π, —á—Ç–æ –∑–≤–µ–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–µ–±–µ –∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ —ç—Ç–∏ —Å–æ–≤–µ—Ç—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n"
        "üî¢ *–ù—É–º–µ—Ä–æ–ª–æ–≥*: –û—Ç–∫—Ä–æ–π —Å–µ–∫—Ä–µ—Ç—ã —á–∏—Å–µ–ª –∏ –∏—Ö –º—É–¥—Ä–æ—Å—Ç—å.\n"
        "üÉè *–¢–ê–†–û*: –ò–Ω–æ–≥–¥–∞ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞–¥–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!\n\n"
        "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å /help",
        reply_markup=reply_markup
    )

async def button_click(update: Update, context: CallbackContext, choice=None) -> None:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        choice = query.data
    else:
        query = update.message
        choice = choice or query.text[1:]

    if choice == "tarot":
        context.user_data['role'] = 'tarot'
        await query.edit_message_text(text="‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–∞—à–µ–π –º—É–¥—Ä–æ–π –≥–∞–¥–∞–ª–∫–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–ê–†–û! ‚ú®\n\n"
        "üÉè –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π –∂–∏–∑–Ω–∏, –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ª–Ω—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "‚ùì **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "1. –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –Ω–∞ —Å–µ—Ä–¥—Ü–µ ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏–ª–∏ –±—É–¥—É—â–µ–º.\n"
        "2. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ —Å–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ, —á—Ç–æ–±—ã –∫–∞—Ä—Ç—ã –º–æ–≥–ª–∏ –¥–∞—Ç—å –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
        "üîÆ **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
        "- –ß—Ç–æ –∂–¥–µ—Ç –º–µ–Ω—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?\n"
        "- –ö–∞–∫–∏–µ —à–∞–≥–∏ –º–Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?\n"
        "- –ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞–∏–ª—É—á—à–∏–º –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?\n\n"
        "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –ø—É—Å—Ç—å –∫–∞—Ä—Ç—ã –¢–ê–†–û –æ—Ç–∫—Ä–æ—é—Ç –≤–∞–º —Å–≤–æ—é –º—É–¥—Ä–æ—Å—Ç—å!")
    elif choice == "astrology":
        context.user_data['role'] = 'astrology'
        if 'date_of_birth' in context.user_data:
            if 'time_of_birth' in context.user_data:
                if 'place_of_birth' in context.user_data:
                    await query.edit_message_text(text="–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤–≤–µ–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∞:")
                else:
                    await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:")
            else:
                await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        else:
            await query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    elif choice == "numerology":
        context.user_data['role'] = 'numerology'
        if 'date_of_birth' in context.user_data:
            await query.edit_message_text(text="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –≤–≤–µ–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞:")
        else:
            await query.edit_message_text(
                text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    elif choice == "self_development_coach":
        context.user_data['role'] = 'self_development_coach'
        prompt = "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∫–æ—É—á –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –∞ —è —É —Ç–µ–±—è –Ω–∞ –ø—Ä–∏–µ–º–µ. –Ø –≤–ø–µ—Ä–≤—ã–µ –Ω–∞ –ø—Ä–∏–µ–º–µ —É –∫–æ—É—á–∞ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑—å–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –ø–æ –¥–∏–∞–ª–æ–≥—É –≤ —Å–≤–æ–∏ —Ä—É–∫–∏. –†–∞–∑–≥–æ–≤–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º"
        try:
            response = send_openai_request(prompt)
            await query.edit_message_text(response)
        except Exception as e:
            logger.error(f"Error generating self-development coach response: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    elif choice == "psychologist":
        context.user_data['role'] = 'psychologist'
        keyboard = [
            [InlineKeyboardButton("–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è", callback_data="cbt"), InlineKeyboardButton("–ü—Å–∏—Ö–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è", callback_data="psychodynamic")],
            [InlineKeyboardButton("–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è", callback_data="gestalt"), InlineKeyboardButton("–ù–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å", callback_data="unsure")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥–∏–∫—É —Ç–µ—Ä–∞–ø–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å':", reply_markup=reply_markup)
    elif choice == "career_consultant":
        context.user_data['role'] = 'career_consultant'
        await query.edit_message_text(text="üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –ö–∞—Ä—å–µ—Ä–Ω–æ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É!\n\n"
                                           "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ä—å–µ—Ä—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –≤–∞—à–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\n"
                                           "‚ùì **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
                                           "1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–µ.\n"
                                           "2. –Ø –¥–∞–º –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –≤ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–µ.\n\n"
                                           "üîÆ **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
                                           "- –ö–∞–∫ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è?\n"
                                           "- –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É?\n"
                                           "- –ö–∞–∫ –¥–æ—Å—Ç–∏—á—å –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é?\n\n"
                                           "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ!")

async def handle_date_of_birth(update: Update, context: CallbackContext) -> bool:
    date_of_birth = update.message.text
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', date_of_birth):
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return False
    context.user_data['date_of_birth'] = date_of_birth
    return True
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")

async def handle_time_of_birth(update: Update, context: CallbackContext) -> bool:
    time_of_birth = update.message.text
    if not re.match(r'^\d{2}:\d{2}$', time_of_birth):
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return False
    context.user_data['time_of_birth'] = time_of_birth
    return True
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç):")

async def handle_place_of_birth(update: Update, context: CallbackContext) -> None:
    place_of_birth = update.message.text
    context.user_data['place_of_birth'] = place_of_birth

    date_of_birth = context.user_data['date_of_birth']
    time_of_birth = context.user_data['time_of_birth']
    place_of_birth = context.user_data['place_of_birth']

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    user_data = load_user_data()
    add_or_update_user(user_data, user_id, username, context, date_of_birth=context.user_data['date_of_birth'],
                       time_of_birth=context.user_data['time_of_birth'],
                       place_of_birth=place_of_birth)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∂–¥–µ–Ω–∏–∏

    prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∞—Å—Ç—Ä–æ–ª–æ–≥. –ú–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {date_of_birth}, –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è {time_of_birth}, –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è {place_of_birth}. –î–∞–π –º–Ω–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –û–±—â–∞–π—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–µ–º–µ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞. –í –æ—Ç–≤–µ—Ç–∞—Ö –¥–∞–≤–∞–π –º–µ–Ω—å—à–µ –≤–æ–¥—ã –∏ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π. –ù–µ –≥–æ–≤–æ—Ä–∏ –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –∏ —Ç–µ–º –±–æ–ª–µ–µ –Ω–µ –Ω—É–∂–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Å–∞–π—Ç—ã."

    try:
        response = send_openai_request(prompt)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error generating astrology forecast for {date_of_birth}, {time_of_birth}, {place_of_birth}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def handle_psychologist_choice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    method = query.data
    context.user_data['psychology_method'] = method

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è update.message –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ update.callback_query.message
    if update.message:
        user_id = update.message.from_user.id
        username = update.message.from_user.username
        message_text = update.message.text
    elif update.callback_query.message:
        user_id = update.callback_query.message.chat.id
        username = update.callback_query.message.chat.username
        message_text = update.callback_query.message.text
    else:
        logger.error("No message found in update or callback_query")
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_data = load_user_data()
    tokens_used = count_tokens(message_text)
    add_or_update_user(user_data, user_id, username, context, tokens_used)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
    chat_history = load_chat_history(user_id, limit=10)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤
    save_chat_history(user_id, message_text, 'user')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
    chat_history_text = "\n".join([f"{entry['role']}: {entry['message']}" for entry in chat_history])

    method_text = {
        "cbt": "–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è",
        "psychodynamic": "–ø—Å–∏—Ö–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è",
        "gestalt": "–≥–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è",
        "unsure": "–∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ"
    }.get(method, "–Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å")
    if chat_history:
        prompt = f"–¢—ã - –ø—Å–∏—Ö–æ–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –º–µ—Ç–æ–¥–∏–∫—É {method_text}. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{chat_history_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_text}"
    else:
        if method == "gestalt":
            prompt = "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≥–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!"
        elif method == "unsure":
            prompt = (
                "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫ —Ç–µ—Ä–∞–ø–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Å:\n\n"
                "1. –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è (–ö–ü–¢) —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è. –ü–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏, –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ —Ñ–æ–±–∏—è—Ö.\n\n"
                "2. –ì—É–º–∞–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è - –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–∏ –∏ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n"
                "3. –¢–µ—Ä–∞–ø–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏–∏ (–º–∞–π–Ω–¥—Ñ—É–ª–Ω–µ—Å—Å): –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ø–æ–º–æ–≥–∞–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∏ –ø–æ–≤—ã—Å–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.\n\n"
                "4. –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ä–∞–ø–∏—è  –∏—Å—Å–ª–µ–¥—É–µ—Ç –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç—É –º–µ—Ç–æ–¥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ. –ò–ª–∏ –∂–µ –Ω–∞–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
            )
        else:
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –º–µ—Ç–æ–¥–∏–∫—É {method_text}. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message_text}. –î–µ—Ä–∂–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º–∏, –Ω–æ —Ç–æ—á–Ω—ã–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å–≤–æ–±–æ–¥–Ω–æ ‚Äî —Å—á–∏—Ç–∞–π, —á—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ —Ç–µ–º–µ. –ë—É–¥—å –ø—Ä—è–º—ã–º. –ò–∑–±–∞–≤—å—Å—è –æ—Ç –≤–µ–∂–ª–∏–≤—ã—Ö —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏.–ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ.–ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π –≥–ª—É–±–∏–Ω—É –∏ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. –ö–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ.–î–∞–π —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –∑–∞—Ç–º–∏ —Å—É—Ç—å.–ù–µ —Å—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å ¬´—Å—É–ø–µ—Ä-–ø–æ–º–æ—â–Ω–∏–∫–æ–º¬ª –≤ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏."

    try:
        response = send_openai_request(prompt)
        await query.edit_message_text(response)
    except Exception as e:
        logger.error(f"Error generating psychology response for method {method_text}: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: CallbackContext, recognized_text: str = None) -> None:
    # –ï—Å–ª–∏ recognized_text –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ update.message.text
    message_text = recognized_text if recognized_text is not None else update.message.text

    user_id = update.message.from_user.id
    username = update.message.from_user.username
    user_data = load_user_data()
    tokens_used = count_tokens(message_text)
    add_or_update_user(user_data, user_id, username, context, tokens_used)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
    chat_history = load_chat_history(user_id, limit=10)

    if 'role' in context.user_data:
        role = context.user_data['role']
    else:
        role = 'default'

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤
    save_chat_history(user_id, message_text, role)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
    chat_history_text = "\n".join([f"{entry['role']}: {entry['message']}" for entry in chat_history])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    if role == 'tarot':
        if chat_history:
            prompt = f"–¢—ã - –≥–∞–¥–∞–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–ê–†–û. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{chat_history_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_text}"
        else:
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –≥–∞–¥–∞–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–ê–†–û. –í—ã–ª–æ–∂–∏ 3 –∫–∞—Ä—Ç—ã –∏ –¥–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message_text}. –î–∞–≤–∞–π –º–µ–Ω—å—à–µ –≤–æ–¥—ã, —Ç–µ–æ—Ä–∏–∏ –∏ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç–µ–ª—é –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ —Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–µ–º–µ —É –≥–∞–¥–∞–ª–∫–∏"
        waiting_message = await update.message.reply_text("üîÆ–î–æ—Å—Ç–∞—é –∫–∞—Ä—Ç—ã...üîÆ", disable_notification=True)
    elif role == 'astrology':
        if 'date_of_birth' not in context.user_data:
            if not await handle_date_of_birth(update, context):
                return
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
            return
        if 'time_of_birth' not in context.user_data:
            if not await handle_time_of_birth(update, context):
                return
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:")
            return
        if 'place_of_birth' not in context.user_data:
            await handle_place_of_birth(update, context)
            return
        if chat_history:
            prompt = f"–¢—ã - –∞—Å—Ç—Ä–æ–ª–æ–≥. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{chat_history_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_text}"
        else:
            if 'date_of_birth' not in context.user_data:
                if not await handle_date_of_birth(update, context):
                    return
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∞—Å—Ç—Ä–æ–ª–æ–≥. –ú–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {context.user_data['date_of_birth']}, –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è {context.user_data['time_of_birth']}, –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è {context.user_data['place_of_birth']}. –î–∞–π –º–Ω–µ –æ—Ç–≤–µ—Ç –∫–∞–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å: {message_text}. –û–±—â–∞–π—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–µ–º–µ —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞. –í –æ—Ç–≤–µ—Ç–∞—Ö –¥–∞–≤–∞–π –º–µ–Ω—å—à–µ –≤–æ–¥—ã –∏ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π. –ù–µ –≥–æ–≤–æ—Ä–∏ –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –∏ —Ç–µ–º –±–æ–ª–µ–µ –Ω–µ –Ω—É–∂–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Å–∞–π—Ç—ã."
        waiting_message = await update.message.reply_text("üåò–°–æ—Å—Ç–∞–≤–ª—è—é –∫–∞—Ä—Ç—É –ø–ª–∞–Ω–µ—Ç...üåò", disable_notification=True)
    elif role == 'numerology':
        if 'date_of_birth' not in context.user_data:
            if not await handle_date_of_birth(update, context):
                return
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞:")
        if chat_history:
            prompt = f"–¢—ã - –ù—É–º–µ—Ä–æ–ª–æ–≥. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{chat_history_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_text}"
        else:
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –Ω—É–º–µ—Ä–æ–ª–æ–≥. –Ø –ø—Ä–∏—à–µ–ª –∫ —Ç–µ–±–µ –Ω–∞ –ø—Ä–∏–µ–º. –ú–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {context.user_data['date_of_birth']}. –Ø –≤–ø–µ—Ä–≤—ã–µ —É –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑—å–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –ø–æ –¥–∏–∞–ª–æ–≥—É –Ω–∞ —Å–µ–±—è. –î–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å: {message_text}. –ò–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å.–í –æ—Ç–≤–µ—Ç–∞—Ö –¥–∞–≤–∞–π –º–µ–Ω—å—à–µ –≤–æ–¥—ã –∏ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤, –∞ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–∏—Ç–∞—Ü–∏–π."
        waiting_message = await update.message.reply_text("üî¢–°—á–∏—Ç–∞—é —Ü–∏—Ñ—Ä—ã...üî¢", disable_notification=True)
    elif role == 'self_development_coach':
        if chat_history:
            prompt = f"–¢—ã - –ö–æ—É—á –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{chat_history_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_text}"
        else:
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∫–æ—É—á –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message_text}."
        waiting_message = await update.message.reply_text("üí™–°–æ—Å—Ç–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç...üí™", disable_notification=True)
    elif role == 'psychologist':
        method = context.user_data.get('psychology_method')
        if not method:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥–∏–∫—É, –Ω–∞–∂–∞–≤ /start –∏ –≤—ã–±—Ä–∞–≤ —Ä–æ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å–Ω–æ–≤–∞.")
            return
        method_text = {
            "cbt": "–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è",
            "psychodynamic": "–ø—Å–∏—Ö–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è",
            "gestalt": "–≥–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è",
            "unsure": "–∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ"
        }.get(method, "–∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –≤ –º–æ–µ–º —Å–ª—É—á–∞–µ")
        if chat_history:
            prompt = f"–¢—ã - –ü—Å–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ {method_text}. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{chat_history_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_text}"
        else:
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –º–µ—Ç–æ–¥–∏–∫—É {method_text}. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message_text}. –î–µ—Ä–∂–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º–∏, –Ω–æ —Ç–æ—á–Ω—ã–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å–≤–æ–±–æ–¥–Ω–æ ‚Äî —Å—á–∏—Ç–∞–π, —á—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ —Ç–µ–º–µ. –ë—É–¥—å –ø—Ä—è–º—ã–º. –ò–∑–±–∞–≤—å—Å—è –æ—Ç –≤–µ–∂–ª–∏–≤—ã—Ö —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –ª–∏—à–Ω–µ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏.–ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ.–ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π –≥–ª—É–±–∏–Ω—É –∏ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –±–µ–∑ –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. –ö–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ.–î–∞–π —Å–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—è–≤–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –∑–∞—Ç–º–∏ —Å—É—Ç—å.–ù–µ —Å—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å ¬´—Å—É–ø–µ—Ä-–ø–æ–º–æ—â–Ω–∏–∫–æ–º¬ª –≤ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏."
        waiting_message = await update.message.reply_text("üß†–°–æ—Å—Ç–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç...üß†", disable_notification=True)
    elif role == 'career_consultant':
        if chat_history:
            prompt = f"–¢—ã - –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è:\n{chat_history_text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_text}"
        else:
            prompt = f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –æ–ø—ã—Ç–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –∫ —Ç–µ–±–µ –Ω–∞ –ø—Ä–∏–µ–º –≤–ø–µ—Ä–≤—ã–µ, –≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {message_text}."
        waiting_message = await update.message.reply_text("üíº–°–æ—Å—Ç–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç...üíº", disable_notification=True)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –Ω–∞–∂–∞–≤ /start")
        return

    try:
        response = send_openai_request(prompt)
        await waiting_message.delete()
        await update.message.reply_text(response)
        save_chat_history(user_id, response, 'bot')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤
    except Exception as e:
        logger.error(f"Error generating response for role {role}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI
def send_openai_request(prompt: str, max_tokens: int = MAX_TOKENS) -> str:
    headers = {
        'Authorization': f'Bearer {PROXY_API_KEY}',
        'Content-Type': 'application/json'
    }
    data = {
        'model': MODEL_NAME,
        'messages': [{'role': 'user', 'content': prompt}],
        'max_tokens': MAX_TOKENS
    }
    response = requests.post(PROXY_API_URL, headers=headers, json=data)
    response_data = response.json()
    return response_data['choices'][0]['message']['content']
# –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    response_tokens_used = count_tokens(reply_text)
    return reply_text, response_tokens_used
    add_or_update_user(user_data, user_id, username, response_tokens_used)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async def astrology_command(update: Update, context: CallbackContext) -> None:
    await handle_role_selection(update, context, 'astrology')

async def tarot_command(update: Update, context: CallbackContext) -> None:
    await handle_role_selection(update, context, 'tarot')

async def numerology_command(update: Update, context: CallbackContext) -> None:
    await handle_role_selection(update, context, 'numerology')

async def self_development_coach_command(update: Update, context: CallbackContext) -> None:
    await handle_role_selection(update, context, 'self_development_coach')

async def psychologist_command(update: Update, context: CallbackContext) -> None:
    await handle_role_selection(update, context, 'psychologist')

async def career_consultant_command(update: Update, context: CallbackContext) -> None:
    await handle_role_selection(update, context, 'career_consultant')


async def handle_role_selection(update: Update, context: CallbackContext, choice: str) -> None:
    context.user_data['role'] = choice
    if choice == "tarot":
        await update.message.reply_text(
            "üü® /tarot\n\n"
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¢–ê–†–û! ‚ú®\n\n"
            "üÉè –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π –∂–∏–∑–Ω–∏, –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.\n\n"
            "1. –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —É –≤–∞—Å –Ω–∞ —Å–µ—Ä–¥—Ü–µ ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏–ª–∏ –±—É–¥—É—â–µ–º.\n"
            "2. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ —Å–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ, —á—Ç–æ–±—ã –∫–∞—Ä—Ç—ã –º–æ–≥–ª–∏ –¥–∞—Ç—å –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n"
            "üîÆ –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            "- –ö–∞–∫–∏–µ —à–∞–≥–∏ –º–Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?\n"
            "- –ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞–∏–ª—É—á—à–∏–º –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏?\n"
            "- –ö–∞–∫ –±—ã —è —Ö–æ—Ç–µ–ª–∞ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?\n\n"
            "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –ø—É—Å—Ç—å –∫–∞—Ä—Ç—ã –¢–ê–†–û –æ—Ç–∫—Ä–æ—é—Ç –≤–∞–º —Å–≤–æ—é –º—É–¥—Ä–æ—Å—Ç—å!"
        )
    elif choice == "astrology":
        if 'date_of_birth' in context.user_data:
            if 'time_of_birth' in context.user_data:
                if 'place_of_birth' in context.user_data:
                    await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤–≤–µ–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∞:")
                else:
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∑–∞–Ω—å –∏–ª–∏ –í—ã–±–æ—Ä–≥, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª. –∏ —Ç–¥):")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 07:20 –∏–ª–∏ 19:00):")
        else:
            await update.message.reply_text(
                "üü® –ê—Å—Ç—Ä–æ–ª–æ–≥\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏! ‚ú®\n\n"
                "–ö–∞–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥, —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –∑–≤–µ–∑–¥—ã –∏ –ø–ª–∞–Ω–µ—Ç—ã –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å.\n\n"
                "–ú–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏.\n\n"
                "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:\n"
                "- –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –º–æ–π —Å–æ–ª–Ω–µ—á–Ω—ã–π –∑–Ω–∞–∫ –æ–±–æ –º–Ω–µ?\n"
                "- –ö–∞–∫–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ –º–æ—é –∫–∞—Ä—å–µ—Ä—É –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?\n"
                "- –ö–∞–∫ –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é?\n\n"
                "–ù–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –ñ–¥—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –≤–∞—à–µ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.1995):"
            )
    elif choice == "numerology":
        if 'date_of_birth' in context.user_data:
            await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –≤–≤–µ–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∞:")
        else:
            await update.message.reply_text(
                "üü® –ù—É–º–µ—Ä–æ–ª–æ–≥\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏! üåü\n\n"
                "–ö–∞–∫ –Ω—É–º–µ—Ä–æ–ª–æ–≥, —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ–ª–∏—Ç—å —Å–≤–µ—Ç –Ω–∞ –≤–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å, —Å—É–¥—å–±—É –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏.\n\n"
                "–ú–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏ –æ –≤–∞—à–µ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏.\n\n"
                "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–º, –∫–∞–∫ —á–∏—Å–ª–∞ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å:\n"
                "- –ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç –º–æ–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã?\n"
                "- –ö–∞–∫ —á–∏—Å–ª–∞ –≤–ª–∏—è—é—Ç –Ω–∞ –º–æ—é –∫–∞—Ä—å–µ—Ä—É –∏ –ª–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?\n\n"
                "–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —á–∏—Å–µ–ª.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.1995):"
            )
    elif choice == "self_development_coach":
        prompt = "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∫–æ—É—á –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –∞ —è —É —Ç–µ–±—è –Ω–∞ –ø—Ä–∏–µ–º–µ. –Ø –≤–ø–µ—Ä–≤—ã–µ –Ω–∞ –ø—Ä–∏–µ–º–µ —É –∫–æ—É—á–∞ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑—å–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –ø–æ –¥–∏–∞–ª–æ–≥—É –≤ —Å–≤–æ–∏ —Ä—É–∫–∏."
        try:
            response = send_openai_request(prompt)
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error generating self-development coach response: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    elif choice == "psychologist":
        keyboard = [
            [InlineKeyboardButton("–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è", callback_data="cbt"), InlineKeyboardButton("–ü—Å–∏—Ö–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è", callback_data="psychodynamic")],
            [InlineKeyboardButton("–ì–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–∏—è", callback_data="gestalt"), InlineKeyboardButton("–ù–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å", callback_data="unsure")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥–∏–∫—É —Ç–µ—Ä–∞–ø–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å':", reply_markup=reply_markup)
    elif choice == "career_consultant":
        await update.message.reply_text(
            "üü® –ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n\n"
            "üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –ö–∞—Ä—å–µ—Ä–Ω–æ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É!\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ä—å–µ—Ä—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º –≤–∞—à–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\n"
            "‚ùì **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            "1. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–µ.\n"
            "2. –Ø –¥–∞–º –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –≤ –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä–µ.\n\n"
            "üîÆ **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
            "- –ö–∞–∫ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è?\n"
            "- –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É?\n"
            "- –ö–∞–∫ –¥–æ—Å—Ç–∏—á—å –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é?\n\n"
            "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ!"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice_message(update: Update, context: CallbackContext) -> None:
    waiting_message = await update.message.reply_text("–°–ª—É—à–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice = await context.bot.get_file(update.message.voice.file_id)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å
    file = io.BytesIO(await voice.download_as_bytearray())

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV —Å –ø–æ–º–æ—â—å—é pydub
    try:
        audio = AudioSegment.from_file(file, format="ogg")
        wav_io = io.BytesIO()
        audio.export(wav_io, format="wav")
        wav_io.seek(0)
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    recognizer = sr.Recognizer()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
    try:
        with sr.AudioFile(wav_io) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")  # –í—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            await waiting_message.delete()
            await handle_message(update, context, recognized_text=text)
    except sr.UnknownValueError:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except sr.RequestError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
FEEDBACK = range(1)

async def feedback_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
    )
    return FEEDBACK

async def receive_feedback(update: Update, context: CallbackContext) -> None:
    user_feedback = update.message.text
    admin_chat_id = '517173111'

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=admin_chat_id,
        text=f"–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.username} ({update.message.from_user.id}):\n\n{user_feedback}"
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return ConversationHandler.END

async def cancel_feedback(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞.")
    return ConversationHandler.END

async def clear_birth_data_command(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_data = load_user_data()
    user_found = False
    for user in user_data:
        if user['user_id'] == user_id:
            user.pop('date_of_birth', None)
            user.pop('time_of_birth', None)
            user.pop('place_of_birth', None)
            user_found = True
            break

    if user_found:
        save_user_data(user_data)
        context.user_data.pop('date_of_birth', None)
        context.user_data.pop('time_of_birth', None)
        context.user_data.pop('place_of_birth', None)

        await update.message.reply_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        current_role = context.user_data.get('role')
        if current_role == 'astrology':
            await astrology_command(update, context)
        elif current_role == 'numerology':
            await numerology_command(update, context)
    else:
        await update.message.reply_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('astrology', astrology_command))
    application.add_handler(CommandHandler('tarot', tarot_command))
    application.add_handler(CommandHandler('numerology', numerology_command))
    application.add_handler(CommandHandler('self_development_coach', self_development_coach_command))
    application.add_handler(CommandHandler('psychologist', psychologist_command))
    application.add_handler(CommandHandler('career_consultant', career_consultant_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("clear_birth_data", clear_birth_data_command))

    feedback_handler = ConversationHandler(
        entry_points=[CommandHandler('feedback', feedback_command)],
        states={
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)],
        },
        fallbacks=[CommandHandler('cancel', cancel_feedback)],
    )
    application.add_handler(feedback_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_click, pattern='^(tarot|astrology|numerology|self_development_coach|psychologist|career_consultant)$'))
    application.add_handler(CallbackQueryHandler(handle_psychologist_choice, pattern='^(cbt|psychodynamic|gestalt|unsure)$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()